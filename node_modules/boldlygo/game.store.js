var _ = require('lodash');

var Dispatcher = require('./utils/flux.dispatcher');
var Warehouse = require('./utils/flux.warehouse');


_.idMap = function(collection){
	return _.reduce(collection, function(r, val, id){
		val.id = id;
		r[id] = val;
		return r;
	}, {})
};

var GameProps = _.extend({},
	require('../../config/parameters'),
	require('../../config/buildings'),
	require('../../config/missions'),
	require('../../config/roles'),
	require('../../config/events')
);


GameProps.buildings = _.idMap(GameProps.buildings);
GameProps.events = _.idMap(GameProps.events);
GameProps.roles = _.idMap(GameProps.roles);
GameProps.missions = _.idMap(GameProps.missions);


var oneTimeEvents = [];
var phases = ['EVENTS', 'FOOD', 'CLEANUP'];


var rarityMap = _(GameProps.parameters.rarities).map(function(weight, val){
	return _.times(weight * 100, function(){return val})
}).flatten().value();


var execute = function(fn){
	if(_.isFunction(fn)) return fn.call(GameState);
	return fn;
}




var GameState = {
	mission : {},
	players : {},
	buildings : _.reduce(GameProps.buildings, function(r, building, id){
				r[id] = building;
				r[id].id = id;
				r[id].isBuilt = building.startWith === true;
				r[id].isOperational = building.startWith === true;
			return r;
		},{}),

	round : 0,
	events : {},
	phase : phases[0],

	random : {
		chance : function(percent){
			return Math.random() < percent;
		},
		player : function(){
			console.log(GameState.players, arguments);
			console.log(_.difference(GameState.players, [].slice.call(arguments)));
			return _.sample(GameState.players, arguments);
		},
		building : function(){
			return _.sample(_.filter(GameState.buildings, 'isBuilt')).name
		},
		operationalBuilding : function(){
			return _.sample(_.filter(GameState.buildings, 'isOperational')).name
		},
	},
	numberOf : {
		players : function(){
			return _.size(GameState.players);
		},
		buildings : function(){
			return _.size(_.filter(GameState.buildings, 'isBuilt'))
		},
		operationalBuildings : function(){
			return _.size(_.filter(GameState.buildings, 'isOperational'))
		},
	}
}


//Testing Data
GameState.mission = GameProps.missions.OUTPOST;
GameState.players = {
	'DOCTOR' : 'LP',
	'COMMANDER' : "Scott",
	'BOTANIST' : "Katie",
	"TECHNICIAN" : 'Kellen'
}




module.exports = GameStore = Warehouse.createStore(Dispatcher,{
	actions : {
		SETUP_GAME : function(initialGameConfig){
			GameState = _.extend(GameState , initialGameConfig);
			this.emitChange();
		},

		UPDATE_BUILDING : function(payload){
			GameState.buildings[payload.id] = _.extend(GameState.buildings[payload.id], payload.newState);
			this.emitChange();
		},

		NEXT_PHASE : function(){
			GameState.phase = phases[phases.indexOf(GameState.phase) + 1]
			this.emitChange();
		},

		NEXT_ROUND : function(){
			GameState.events = {};
			GameState.round += 1;
			GameState.phase = phases[0];

			this.emitChange();
		},

		NEW_EVENT : function(){
			console.log('NEW EVENT');
			var rarity = _.sample(rarityMap);
			var eventPool = _.filter(GameProps.events, function(event){
				if(rarity !== event.rarity) return false;
				if(GameState.events[event.id]) return false;
				if(_.contains(oneTimeEvents, event.id)) return false;

				if(execute(event.requirement) === false) return false;
				return true;
			})

			var event = _.sample(eventPool);
			if(!event) return GameStore.actions.NEW_EVENT.call(this);
			if(execute(event.one_time)) oneTimeEvents.push(event.id);

			event = _.extend({}, event, execute(event.action));
			GameState.events[event.id] = event;
			this.emitChange();
		},


	},




	getGameProps : function(){
		return GameProps;
	},

	getGameState: function(){
		return GameState;
	}

});


